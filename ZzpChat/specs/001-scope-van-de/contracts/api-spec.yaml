openapi: 3.0.3
info:
  title: ZzpChat MVP API
  description: API for ZzpChat WhatsApp AI Assistant for ZZP'ers
  version: 1.0.0
  contact:
    name: ZzpChat Support
    email: support@zzpchat.nl

servers:
  - url: https://api.zzpchat.nl/v1
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

paths:
  # Authentication
  /auth/signin:
    post:
      summary: User sign in
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Successful sign in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session:
                    type: object
                    properties:
                      token:
                        type: string
        '401':
          description: Invalid credentials
        '400':
          description: Invalid input

  /auth/signup:
    post:
      summary: User registration
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                name:
                  type: string
                  minLength: 2
                companyName:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '409':
          description: Email already exists

  # Dashboard
  /dashboard/stats:
    get:
      summary: Get dashboard statistics
      tags: [Dashboard]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalInvoices:
                    type: integer
                  pendingInvoices:
                    type: integer
                  monthlyRevenue:
                    type: number
                  totalClients:
                    type: integer
                  recentActivity:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'

  # AI Assistant
  /ai/process-message:
    post:
      summary: Process WhatsApp message with AI
      tags: [AI Assistant]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message, messageType]
              properties:
                message:
                  type: string
                messageType:
                  type: string
                  enum: [text, voice]
                whatsappMessageId:
                  type: string
      responses:
        '200':
          description: Message processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  actionType:
                    type: string
                    enum: [CREATE_INVOICE, CREATE_QUOTE, ADD_TIME, SUMMARIZE_EMAILS, MANAGE_CALENDAR, UNKNOWN]
                  actionData:
                    type: object
                  status:
                    type: string
                    enum: [PROCESSING, COMPLETED, ERROR]

  /ai/conversation-history:
    get:
      summary: Get AI conversation history
      tags: [AI Assistant]
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Conversation history
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIConversation'
                  total:
                    type: integer

  # WhatsApp Integration
  /whatsapp/webhook:
    post:
      summary: WhatsApp webhook endpoint
      tags: [WhatsApp]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                object:
                  type: string
                entry:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Webhook processed
        '400':
          description: Invalid webhook data

  /whatsapp/status:
    get:
      summary: Get WhatsApp connection status
      tags: [WhatsApp]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Connection status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [CONNECTED, DISCONNECTED, ERROR]
                  phoneNumber:
                    type: string
                  lastMessage:
                    type: string
                    format: date-time

  # Invoices
  /invoices:
    get:
      summary: Get user invoices
      tags: [Invoices]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, SENT, PAID, OVERDUE, CANCELLED]
        - name: clientId
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invoice'
                  total:
                    type: integer

    post:
      summary: Create new invoice
      tags: [Invoices]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, clientId]
              properties:
                amount:
                  type: number
                  minimum: 0.01
                clientId:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                lineItems:
                  type: array
                  items:
                    type: object
                    properties:
                      description:
                        type: string
                      quantity:
                        type: number
                      price:
                        type: number
      responses:
        '201':
          description: Invoice created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          description: Invalid input

  /invoices/{id}:
    get:
      summary: Get invoice by ID
      tags: [Invoices]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found

    put:
      summary: Update invoice
      tags: [Invoices]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  minimum: 0.01
                status:
                  type: string
                  enum: [DRAFT, SENT, PAID, OVERDUE, CANCELLED]
                description:
                  type: string
                dueDate:
                  type: string
                  format: date-time
                lineItems:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Invoice updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found

    delete:
      summary: Delete invoice
      tags: [Invoices]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Invoice deleted
        '404':
          description: Invoice not found

  # Quotes
  /quotes:
    get:
      summary: Get user quotes
      tags: [Quotes]
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED]
        - name: clientId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of quotes
          content:
            application/json:
              schema:
                type: object
                properties:
                  quotes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Quote'

    post:
      summary: Create new quote
      tags: [Quotes]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [amount, clientId]
              properties:
                amount:
                  type: number
                  minimum: 0.01
                clientId:
                  type: string
                description:
                  type: string
                validUntil:
                  type: string
                  format: date-time
                lineItems:
                  type: array
                  items:
                    type: object
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quote'

  # Time Entries
  /time-entries:
    get:
      summary: Get time entries
      tags: [Time Entries]
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
        - name: clientId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  timeEntries:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimeEntry'

    post:
      summary: Create time entry
      tags: [Time Entries]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [project, hours, date]
              properties:
                project:
                  type: string
                hours:
                  type: number
                  minimum: 0.1
                date:
                  type: string
                  format: date
                notes:
                  type: string
                clientId:
                  type: string
      responses:
        '201':
          description: Time entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntry'

  # Integrations
  /integrations:
    get:
      summary: Get user integrations
      tags: [Integrations]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of integrations
          content:
            application/json:
              schema:
                type: object
                properties:
                  integrations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Integration'

  /integrations/{type}/connect:
    post:
      summary: Connect integration
      tags: [Integrations]
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [WHATSAPP, GMAIL, GOOGLE_CALENDAR, GOOGLE_DRIVE, OUTLOOK_MAIL, OUTLOOK_CALENDAR]
      responses:
        '200':
          description: Integration connection initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  authUrl:
                    type: string
                  status:
                    type: string

  /integrations/{type}:
    delete:
      summary: Disconnect integration
      tags: [Integrations]
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Integration disconnected

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        companyName:
          type: string
        subscriptionTier:
          type: string
          enum: [STARTER, PRO, BUSINESS]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Client:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        company:
          type: string
        phone:
          type: string
        address:
          type: string
        vatNumber:
          type: string
        createdAt:
          type: string
          format: date-time

    Invoice:
      type: object
      properties:
        id:
          type: string
        number:
          type: string
        amount:
          type: number
        status:
          type: string
          enum: [DRAFT, SENT, PAID, OVERDUE, CANCELLED]
        client:
          $ref: '#/components/schemas/Client'
        dueDate:
          type: string
          format: date-time
        sentAt:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        description:
          type: string
        lineItems:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time

    Quote:
      type: object
      properties:
        id:
          type: string
        number:
          type: string
        amount:
          type: number
        status:
          type: string
          enum: [DRAFT, SENT, ACCEPTED, REJECTED, EXPIRED]
        client:
          $ref: '#/components/schemas/Client'
        validUntil:
          type: string
          format: date-time
        sentAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
        description:
          type: string
        lineItems:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time

    TimeEntry:
      type: object
      properties:
        id:
          type: string
        project:
          type: string
        hours:
          type: number
        date:
          type: string
          format: date
        notes:
          type: string
        client:
          $ref: '#/components/schemas/Client'
        createdAt:
          type: string
          format: date-time

    Integration:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [WHATSAPP, GMAIL, GOOGLE_CALENDAR, GOOGLE_DRIVE, OUTLOOK_MAIL, OUTLOOK_CALENDAR]
        status:
          type: string
          enum: [CONNECTING, CONNECTED, DISCONNECTED, ERROR]
        lastSync:
          type: string
          format: date-time
        errorMessage:
          type: string
        createdAt:
          type: string
          format: date-time

    AIConversation:
      type: object
      properties:
        id:
          type: string
        userMessage:
          type: string
        aiResponse:
          type: string
        actionType:
          type: string
          enum: [CREATE_INVOICE, CREATE_QUOTE, ADD_TIME, SUMMARIZE_EMAILS, MANAGE_CALENDAR, UNKNOWN]
        actionData:
          type: object
        status:
          type: string
          enum: [PROCESSING, COMPLETED, ERROR]
        createdAt:
          type: string
          format: date-time

    Activity:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [INVOICE_CREATED, QUOTE_CREATED, TIME_ADDED, PAYMENT_RECEIVED]
        description:
          type: string
        timestamp:
          type: string
          format: date-time
