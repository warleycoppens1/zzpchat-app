generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  email               String            @unique
  name                String
  companyName         String?
  subscriptionTier    SubscriptionTier  @default(STARTER)
  whatsappPhoneNumber String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  conversations       AI_Conversation[]
  clients             Client[]
  integrations        Integration[]
  invoices            Invoice[]
  quotes              Quote[]
  timeEntries         TimeEntry[]

  @@map("users")
}

model Client {
  id          String      @id @default(uuid())
  name        String
  email       String?
  company     String?
  phone       String?
  address     String?
  vatNumber   String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices    Invoice[]
  quotes      Quote[]
  timeEntries TimeEntry[]

  @@map("clients")
}

model Invoice {
  id          String        @id @default(uuid())
  number      String
  amount      Decimal
  status      InvoiceStatus @default(DRAFT)
  clientId    String
  userId      String
  dueDate     DateTime?
  sentAt      DateTime?
  paidAt      DateTime?
  description String?
  lineItems   Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  client      Client        @relation(fields: [clientId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries TimeEntry[]

  @@unique([number, userId])
  @@map("invoices")
}

model Quote {
  id          String      @id @default(uuid())
  number      String
  amount      Decimal
  status      QuoteStatus @default(DRAFT)
  clientId    String
  userId      String
  validUntil  DateTime?
  sentAt      DateTime?
  acceptedAt  DateTime?
  description String?
  lineItems   Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  client      Client      @relation(fields: [clientId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([number, userId])
  @@map("quotes")
}

model TimeEntry {
  id        String   @id @default(uuid())
  project   String
  hours     Decimal
  date      DateTime @db.Date
  notes     String?
  clientId  String?
  userId    String
  invoiceId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client?  @relation(fields: [clientId], references: [id])
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model Integration {
  id           String            @id @default(uuid())
  type         IntegrationType
  status       IntegrationStatus @default(CONNECTING)
  credentials  String
  userId       String
  lastSync     DateTime?
  errorMessage String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([type, userId])
  @@map("integrations")
}

model AI_Conversation {
  id                String             @id @default(uuid())
  userId            String
  whatsappMessageId String?
  userMessage       String
  aiResponse        String?
  actionType        ActionType?
  actionData        Json?
  status            ConversationStatus @default(PROCESSING)
  errorMessage      String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_conversations")
}

enum SubscriptionTier {
  STARTER
  PRO
  BUSINESS
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum IntegrationType {
  WHATSAPP
  GMAIL
  GOOGLE_CALENDAR
  GOOGLE_DRIVE
  OUTLOOK_MAIL
  OUTLOOK_CALENDAR
}

enum IntegrationStatus {
  CONNECTING
  CONNECTED
  DISCONNECTED
  ERROR
}

enum ActionType {
  CREATE_INVOICE
  CREATE_QUOTE
  ADD_TIME
  SUMMARIZE_EMAILS
  MANAGE_CALENDAR
  UNKNOWN
}

enum ConversationStatus {
  PROCESSING
  COMPLETED
  ERROR
}
